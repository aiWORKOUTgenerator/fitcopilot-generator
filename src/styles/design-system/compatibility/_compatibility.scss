/**
 * Design System Compatibility Layer
 * 
 * This file provides backward compatibility for the design system migration.
 * It maps old token names to the new token system to ensure existing code
 * continues to work while the migration is in progress.
 * 
 * @deprecated These mappings will be removed in a future version.
 * Please use the new token system directly.
 */

// Import the core tokens to ensure they're available
@import '../tokens/core/colors';
@import '../tokens/core/typography';
@import '../tokens/core/spacing';
@import '../tokens/semantic/feedback';
@import '../tokens/semantic/surfaces';
@import '../tokens/semantic/interactive-states';
@import '../tokens/semantic/motion';
@import '../tokens/semantic/status';

// ----------------------------------------------------------------------------
// COLOR MAPPINGS
// ----------------------------------------------------------------------------

// Primary color mappings
$primary-color: $color-primary-500 !default;
$primary-color-light: $color-primary-400 !default;
$primary-color-lighter: $color-primary-300 !default;
$primary-color-lightest: $color-primary-100 !default;
$primary-color-dark: $color-primary-600 !default;
$primary-color-darker: $color-primary-700 !default;
$primary-color-darkest: $color-primary-900 !default;

// Secondary color mappings
$secondary-color: $color-secondary-500 !default;
$secondary-color-light: $color-secondary-400 !default;
$secondary-color-lighter: $color-secondary-300 !default;
$secondary-color-lightest: $color-secondary-100 !default;
$secondary-color-dark: $color-secondary-600 !default;
$secondary-color-darker: $color-secondary-700 !default;
$secondary-color-darkest: $color-secondary-900 !default;

// Feedback color mappings
$success-color: $color-success-500 !default;
$error-color: $color-error-500 !default;
$warning-color: $color-warning-500 !default;
$info-color: $color-info-500 !default;

// Text color mappings
$text-color: $color-gray-800 !default;
$text-color-light: $color-gray-600 !default;
$text-color-lighter: $color-gray-500 !default;
$text-color-lightest: $color-gray-400 !default;
$text-color-dark: $color-gray-900 !default;

// Background color mappings
$bg-color: $color-white !default;
$bg-color-light: $color-gray-50 !default;
$bg-color-dark: $color-gray-100 !default;
$bg-color-darker: $color-gray-200 !default;

// Border color mappings
$border-color: $color-gray-200 !default;
$border-color-light: $color-gray-100 !default;
$border-color-dark: $color-gray-300 !default;

// ----------------------------------------------------------------------------
// TYPOGRAPHY MAPPINGS
// ----------------------------------------------------------------------------

// Font family mappings
$font-family: $font-family-sans !default;
$font-family-mono: $font-family-mono !default;

// Font size mappings
$font-size-xs: $font-size-xs !default;
$font-size-sm: $font-size-sm !default;
$font-size-base: $font-size-md !default;
$font-size-md: $font-size-md !default;
$font-size-lg: $font-size-lg !default;
$font-size-xl: $font-size-xl !default;
$font-size-2xl: $font-size-2xl !default;
$font-size-3xl: $font-size-3xl !default;
$font-size-4xl: $font-size-4xl !default;

// Font weight mappings
$font-weight-thin: $font-weight-thin !default;
$font-weight-light: $font-weight-light !default;
$font-weight-normal: $font-weight-normal !default;
$font-weight-medium: $font-weight-medium !default;
$font-weight-semibold: $font-weight-semibold !default;
$font-weight-bold: $font-weight-bold !default;
$font-weight-extrabold: $font-weight-extrabold !default;
$font-weight-black: $font-weight-black !default;

// Line height mappings
$line-height-none: $line-height-none !default;
$line-height-tight: $line-height-tight !default;
$line-height-normal: $line-height-normal !default;
$line-height-relaxed: $line-height-relaxed !default;
$line-height-loose: $line-height-loose !default;

// ----------------------------------------------------------------------------
// SPACING MAPPINGS
// ----------------------------------------------------------------------------

// Spacing mappings
$spacing-none: $spacing-0 !default;
$spacing-xs: $spacing-1 !default;
$spacing-sm: $spacing-2 !default;
$spacing-md: $spacing-4 !default;
$spacing-lg: $spacing-6 !default;
$spacing-xl: $spacing-8 !default;
$spacing-2xl: $spacing-10 !default;
$spacing-3xl: $spacing-12 !default;
$spacing-4xl: $spacing-16 !default;

// ----------------------------------------------------------------------------
// BORDER RADIUS MAPPINGS
// ----------------------------------------------------------------------------

$border-radius-none: 0 !default;
$border-radius-sm: 0.125rem !default;
$border-radius-md: 0.25rem !default;
$border-radius-lg: 0.5rem !default;
$border-radius-xl: 0.75rem !default;
$border-radius-2xl: 1rem !default;
$border-radius-full: 9999px !default;

// ----------------------------------------------------------------------------
// SURFACE MAPPINGS
// ----------------------------------------------------------------------------

// Card mappings
$card-bg-color: $color-surface !default;
$card-border-radius: $card-border-radius !default;
$card-padding: $card-padding !default;
$card-shadow: $card-shadow !default;

// ----------------------------------------------------------------------------
// INTERACTIVE STATE MAPPINGS
// ----------------------------------------------------------------------------

// Focus ring mappings
$focus-ring-color: rgba($color-primary-500, 0.25) !default;
$focus-ring-size: interactive-state('base', 'focus', 'ring-size') !default;

// Hover state mappings
$hover-opacity: interactive-state('base', 'hover', 'opacity') !default;
$hover-transition: interactive-state('base', 'hover', 'transition') !default;

// Disabled state mappings
$disabled-opacity: interactive-state('base', 'disabled', 'opacity') !default;
$disabled-bg-color: interactive-state('base', 'disabled', 'background') !default;
$disabled-text-color: interactive-state('base', 'disabled', 'text') !default;
$disabled-border-color: interactive-state('base', 'disabled', 'border') !default;

// ----------------------------------------------------------------------------
// MOTION MAPPINGS
// ----------------------------------------------------------------------------

// Duration mappings
$transition-duration-fast: motion-duration('fast') !default;
$transition-duration-normal: motion-duration('normal') !default;
$transition-duration-slow: motion-duration('slow') !default;

// Easing mappings
$transition-easing-default: motion-easing('standard') !default;
$transition-easing-in: motion-easing('in') !default;
$transition-easing-out: motion-easing('out') !default;
$transition-easing-in-out: motion-easing('in-out') !default;

// Common transition mappings
$transition-default: transition-preset('base') !default;
$transition-transform: transition-preset('transform') !default;
$transition-opacity: transition-preset('opacity') !default;
$transition-color: transition-preset('color') !default;

// ----------------------------------------------------------------------------
// STATUS MAPPINGS
// ----------------------------------------------------------------------------

// Status color mappings
$status-active-color: status-color('active') !default;
$status-inactive-color: status-color('inactive') !default;
$status-pending-color: status-color('pending') !default;
$status-error-color: status-color('error') !default;

// Badge style mappings (common styles)
$badge-padding: badge-variant('filled', 'padding') !default;
$badge-font-size: badge-variant('filled', 'font-size') !default;
$badge-font-weight: badge-variant('filled', 'font-weight') !default;
$badge-border-radius: badge-variant('filled', 'border-radius') !default;

// CSS Variable Fallbacks
:root {
  // Backward compatibility for CSS variables
  --primary-color: var(--color-primary, #{$color-primary-500});
  --primary-color-light: var(--color-primary-light, #{$color-primary-400});
  --primary-color-dark: var(--color-primary-dark, #{$color-primary-600});
  
  --secondary-color: var(--color-secondary, #{$color-secondary-500});
  --secondary-color-light: var(--color-secondary-light, #{$color-secondary-400});
  --secondary-color-dark: var(--color-secondary-dark, #{$color-secondary-600});
  
  --text-color: var(--color-text, #{$color-gray-800});
  --text-color-light: var(--color-text-muted, #{$color-gray-600});
  
  --border-color: var(--color-border, #{$color-gray-200});
  --border-color-dark: var(--color-border-hover, #{$color-gray-300});
  
  --bg-color: var(--color-surface, #{$color-white});
  --bg-color-light: var(--color-surface-accent, #{$color-gray-50});
  
  // Motion variables
  --transition-fast: #{motion-duration('fast')};
  --transition-normal: #{motion-duration('normal')};
  --transition-slow: #{motion-duration('slow')};
  
  // Interactive states
  --focus-ring-size: #{interactive-state('base', 'focus', 'ring-size')};
  --disabled-opacity: #{interactive-state('base', 'disabled', 'opacity')};
}

// Feature flag for gradual migration
$use-new-token-system: true !default;
$use-new-form-tokens: $use-new-token-system !default;

/* ====== BUTTON COMPATIBILITY LAYER ====== */

// Import button tokens to ensure they're available
@import '../tokens/components/button-tokens';

// Button background color mapping
@mixin button-bg-color($variant, $state: null) {
  @if $use-new-token-system {
    background-color: button-token($variant, 'bg', $state);
  } @else {
    // Legacy background colors - these will be removed after migration
    @if $variant == 'primary' {
      background-color: var(--color-primary);
    } @else if $variant == 'secondary' {
      background-color: var(--color-surface-accent);
    } @else if $variant == 'outline' or $variant == 'text' {
      background-color: transparent;
    }
    
    // Add hover state
    @if $state == 'hover' {
      @if $variant == 'primary' {
        background-color: var(--color-primary-dark);
      } @else if $variant == 'secondary' {
        background-color: var(--color-border);
      } @else if $variant == 'outline' or $variant == 'text' {
        background-color: rgba(var(--color-primary-rgb), 0.05);
      }
    }
  }
}

// Button text color mapping
@mixin button-text-color($variant) {
  @if $use-new-token-system {
    color: button-token($variant, 'text');
  } @else {
    // Legacy text colors
    @if $variant == 'primary' {
      color: white;
    } @else if $variant == 'secondary' {
      color: var(--color-text);
    } @else if $variant == 'outline' or $variant == 'text' {
      color: var(--color-primary);
    }
  }
}

// Button border mapping
@mixin button-border($variant) {
  @if $use-new-token-system {
    border: button-token($variant, 'border');
  } @else {
    // Legacy border styles
    @if $variant == 'primary' or $variant == 'secondary' or $variant == 'text' {
      border: none;
    } @else if $variant == 'outline' {
      border: 1px solid var(--color-primary);
    }
  }
}

// Button focus ring mapping
@mixin button-focus-ring($variant) {
  @if $use-new-token-system {
    box-shadow: 0 0 0 3px button-token($variant, 'ring', 'focus');
  } @else {
    // Legacy focus ring styles
    @if $variant == 'primary' {
      box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.25);
    } @else if $variant == 'secondary' {
      box-shadow: 0 0 0 3px rgba(var(--color-surface-accent-rgb), 0.25);
    } @else if $variant == 'outline' or $variant == 'text' {
      box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.15);
    }
  }
}

/* ====== CARD COMPATIBILITY LAYER ====== */

// Import surface tokens to ensure they're available
@import '../tokens/semantic/surfaces';

// Card background color mapping
@mixin card-bg-color($type: 'card', $state: null, $dark: false) {
  @if $use-new-token-system {
    background-color: surface-style($type, 'bg', $state, $dark);
  } @else {
    // Legacy card background colors
    @if $state == 'hover' {
      @if $dark {
        background-color: var(--color-dark-surface-hover);
      } @else {
        background-color: var(--color-surface-hover);
      }
    } @else {
      @if $dark {
        background-color: var(--color-dark-surface);
      } @else {
        background-color: var(--color-surface);
      }
    }
  }
}

// Card shadow mapping
@mixin card-shadow($type: 'card', $state: null, $dark: false) {
  @if $use-new-token-system {
    @if $state == null and $dark == true {
      // Handle the card--elevated case with only dark mode set
      box-shadow: surface-style($type, 'shadow', null, true);
    } @else {
      box-shadow: surface-style($type, 'shadow', $state, $dark);
    }
  } @else {
    // Legacy shadow styles
    @if $state == 'hover' {
      @if $dark {
        box-shadow: var(--shadow-lg-dark);
      } @else {
        box-shadow: var(--shadow-lg);
      }
    } @else {
      @if $dark {
        box-shadow: var(--dark-shadow-md);
      } @else {
        box-shadow: var(--shadow-md);
      }
    }
  }
}

// Card border radius mapping
@mixin card-border-radius($type: 'card') {
  @if $use-new-token-system {
    border-radius: surface-style($type, 'border-radius');
  } @else {
    // Legacy border radius
    border-radius: var(--radius-lg);
  }
}

// Card padding mapping
@mixin card-padding($type: 'card') {
  @if $use-new-token-system {
    padding: surface-style($type, 'padding');
  } @else {
    // Legacy padding
    padding: var(--spacing-6);
  }
}

// Card hover effect mapping
@mixin card-hover-effect($type: 'card') {
  @if $use-new-token-system {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    
    &:hover, &:focus {
      transform: translateY(-4px);
      @include card-bg-color($type, 'hover');
      @include card-shadow($type, 'hover');
    }
  } @else {
    // Legacy hover effects
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    
    &:hover, &:focus {
      transform: translateY(-4px);
      background-color: var(--color-surface-hover);
      box-shadow: var(--shadow-lg);
      
      .dark-theme & {
        background-color: var(--color-dark-surface-hover);
        box-shadow: var(--shadow-lg-dark);
      }
    }
  }
}

/* ====== TRANSITION PRESETS COMPATIBILITY LAYER ====== */

// Import motion tokens to ensure they're available
@import '../tokens/semantic/motion';

// Transition preset function
@function compat-transition-preset($type) {
  @if $use-new-token-system {
    // Use the transition-preset function from _motion.scss
    @if $type == 'card' {
      @return transition-preset('card');
    } @else if $type == 'button' {
      @return transition-preset('button');
    } @else if $type == 'fade' {
      @return transition-preset('opacity');
    } @else if $type == 'slide' {
      @return transition-preset('transform');
    } @else if $type == 'input' {
      @return transition-preset('input');
    } @else if $type == 'form-control' {
      @return transition-preset('input');
    } @else {
      @return transition-preset($type);
    }
  } @else {
    // Legacy transition presets
    @if $type == 'card' {
      @return transform 0.2s var(--ease-out), box-shadow 0.2s var(--ease-out);
    } @else if $type == 'button' {
      @return all 0.2s var(--ease-out);
    } @else if $type == 'fade' {
      @return opacity 0.15s var(--ease-out);
    } @else if $type == 'slide' {
      @return transform 0.3s var(--ease-out);
    } @else if $type == 'input' {
      @return border-color 0.15s var(--ease-out), box-shadow 0.15s var(--ease-out);
    } @else if $type == 'form-control' {
      @return background-color 0.15s var(--ease-out), border-color 0.15s var(--ease-out), box-shadow 0.15s var(--ease-out);
    } @else {
      @return all 0.2s var(--ease-out);
    }
  }
}

// For backward compatibility, allow both function names
@function transition-preset($type) {
  @return compat-transition-preset($type);
}

/* ====== SPACING COMPATIBILITY LAYER ====== */

// Import spacing tokens to ensure they're available
@import '../tokens/core/spacing';

// Map the old spacing values to the new token system
$spacing-map: (
  'space-0': 0,
  'space-1': if($use-new-token-system, spacing-value('1'), 0.25rem),
  'space-2': if($use-new-token-system, spacing-value('2'), 0.5rem),
  'space-3': if($use-new-token-system, spacing-value('3'), 0.75rem),
  'space-4': if($use-new-token-system, spacing-value('4'), 1rem),
  'space-5': if($use-new-token-system, spacing-value('5'), 1.25rem),
  'space-6': if($use-new-token-system, spacing-value('6'), 1.5rem),
  'space-8': if($use-new-token-system, spacing-value('8'), 2rem),
  'space-10': if($use-new-token-system, spacing-value('10'), 2.5rem),
  'space-12': if($use-new-token-system, spacing-value('12'), 3rem),
  'space-16': if($use-new-token-system, spacing-value('16'), 4rem),
  'space-20': if($use-new-token-system, spacing-value('20'), 5rem),
  'space-24': if($use-new-token-system, spacing-value('24'), 6rem)
);

// Function to get spacing value
@function spacing($size) {
  @if map-has-key($spacing-map, $size) {
    @return map-get($spacing-map, $size);
  } @else {
    @warn 'Spacing size `#{$size}` not found in spacing map.';
    @return 0;
  }
}

/* ====== FORM INPUT COMPATIBILITY LAYER ====== */

// Import form tokens to ensure they're available
@import '../tokens/components/input-tokens';
@import '../tokens/components/select-tokens';
@import '../tokens/components/form-controls-tokens';

// Form input background color mapping
@mixin input-bg-color($state: null, $dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $state == 'disabled' {
      @if $dark {
        background-color: var(--color-dark-surface-disabled);
      } @else {
        background-color: var(--color-surface-disabled);
      }
    } @else {
      @if $dark {
        background-color: var(--color-dark-surface);
      } @else {
        background-color: var(--color-surface);
      }
    }
  } @else {
    // Legacy input background colors
    @if $state == 'disabled' {
      @if $dark {
        background-color: var(--color-dark-surface-disabled);
      } @else {
        background-color: var(--color-surface-disabled);
      }
    } @else {
      @if $dark {
        background-color: var(--color-dark-surface);
      } @else {
        background-color: var(--color-surface);
      }
    }
  }
}

// Form input text color mapping
@mixin input-text-color($state: null, $dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $state == 'disabled' {
      @if $dark {
        color: var(--color-dark-text-muted);
      } @else {
        color: var(--color-text-muted);
      }
    } @else {
      @if $dark {
        color: var(--color-dark-text);
      } @else {
        color: var(--color-text);
      }
    }
  } @else {
    // Legacy input text colors
    @if $state == 'disabled' {
      @if $dark {
        color: var(--color-dark-text-muted);
      } @else {
        color: var(--color-text-muted);
      }
    } @else {
      @if $dark {
        color: var(--color-dark-text);
      } @else {
        color: var(--color-text);
      }
    }
  }
}

// Form input border mapping
@mixin input-border($state: null, $dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $state == 'hover' {
      @if $dark {
        border-color: var(--color-dark-border-hover);
      } @else {
        border-color: var(--color-border-hover);
      }
    } @else if $state == 'focus' {
      @if $dark {
        border-color: var(--color-dark-primary);
      } @else {
        border-color: var(--color-primary);
      }
    } @else if $state == 'disabled' {
      @if $dark {
        border-color: var(--color-dark-border-muted);
      } @else {
        border-color: var(--color-border-muted);
      }
    } @else if $state == 'error' {
      @if $dark {
        border-color: var(--color-dark-error);
      } @else {
        border-color: var(--color-error);
      }
    } @else {
      @if $dark {
        border-color: var(--color-dark-border);
      } @else {
        border-color: var(--color-border);
      }
    }
  } @else {
    // Legacy input border colors
    @if $state == 'hover' {
      @if $dark {
        border-color: var(--color-dark-border-hover);
      } @else {
        border-color: var(--color-border-hover);
      }
    } @else if $state == 'focus' {
      @if $dark {
        border-color: var(--color-dark-primary);
      } @else {
        border-color: var(--color-primary);
      }
    } @else if $state == 'disabled' {
      @if $dark {
        border-color: var(--color-dark-border-muted);
      } @else {
        border-color: var(--color-border-muted);
      }
    } @else if $state == 'error' {
      @if $dark {
        border-color: var(--color-dark-error);
      } @else {
        border-color: var(--color-error);
      }
    } @else {
      @if $dark {
        border-color: var(--color-dark-border);
      } @else {
        border-color: var(--color-border);
      }
    }
  }
}

// Form input focus ring mapping
@mixin input-focus-ring($state: null, $dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $state == 'error' {
      @if $dark {
        box-shadow: 0 0 0 3px rgba(var(--color-dark-error-rgb), 0.25);
      } @else {
        box-shadow: 0 0 0 3px rgba(var(--color-error-rgb), 0.25);
      }
    } @else {
      @if $dark {
        box-shadow: 0 0 0 3px rgba(var(--color-dark-primary-rgb), 0.25);
      } @else {
        box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.25);
      }
    }
  } @else {
    // Legacy input focus ring
    @if $state == 'error' {
      @if $dark {
        box-shadow: 0 0 0 3px rgba(var(--color-dark-error-rgb), 0.25);
      } @else {
        box-shadow: 0 0 0 3px rgba(var(--color-error-rgb), 0.25);
      }
    } @else {
      @if $dark {
        box-shadow: 0 0 0 3px rgba(var(--color-dark-primary-rgb), 0.25);
      } @else {
        box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.25);
      }
    }
  }
}

// Form checkbox/radio mapping
@mixin checkbox-bg-color($state: null, $dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $state == 'checked' {
      @if $dark {
        background-color: var(--color-dark-primary);
      } @else {
        background-color: var(--color-primary);
      }
    } @else if $state == 'hover' {
      @if $dark {
        background-color: var(--color-dark-surface-hover);
      } @else {
        background-color: var(--color-surface-hover);
      }
    } @else if $state == 'disabled' {
      @if $dark {
        background-color: var(--color-dark-surface-disabled);
      } @else {
        background-color: var(--color-surface-disabled);
      }
    } @else {
      @if $dark {
        background-color: var(--color-dark-surface);
      } @else {
        background-color: var(--color-surface);
      }
    }
  } @else {
    // Legacy checkbox background
    @if $state == 'checked' {
      @if $dark {
        background-color: var(--color-dark-primary);
      } @else {
        background-color: var(--color-primary);
      }
    } @else if $state == 'hover' {
      @if $dark {
        background-color: var(--color-dark-surface-hover);
      } @else {
        background-color: var(--color-surface-hover);
      }
    } @else if $state == 'disabled' {
      @if $dark {
        background-color: var(--color-dark-surface-disabled);
      } @else {
        background-color: var(--color-surface-disabled);
      }
    } @else {
      @if $dark {
        background-color: var(--color-dark-surface);
      } @else {
        background-color: var(--color-surface);
      }
    }
  }
}

// Form input placeholder color mapping
@mixin input-placeholder-color($dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $dark {
      color: var(--color-dark-text-muted);
    } @else {
      color: var(--color-text-muted);
    }
  } @else {
    // Legacy placeholder color
    @if $dark {
      color: var(--color-dark-text-muted);
    } @else {
      color: var(--color-text-muted);
    }
  }
}

// Form label styling
@mixin form-label-styling($dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since these tokens might not be available yet
    @if function-exists('input-token') {
      @if $dark {
        color: var(--color-dark-text);
      } @else {
        color: var(--color-text);
      }
    } @else {
      @if $dark {
        color: var(--color-dark-text);
      } @else {
        color: var(--color-text);
      }
    }
    font-weight: 500;
    font-size: var(--font-size-base);
  } @else {
    // Legacy label styling
    @if $dark {
      color: var(--color-dark-text);
    } @else {
      color: var(--color-text);
    }
    font-weight: 500;
    font-size: var(--font-size-base);
  }
}

// Form error message styling
@mixin form-error-styling($dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since these tokens might not be available yet
    @if $dark {
      color: var(--color-dark-error);
    } @else {
      color: var(--color-error);
    }
    font-size: var(--font-size-sm);
  } @else {
    // Legacy error styling
    @if $dark {
      color: var(--color-dark-error);
    } @else {
      color: var(--color-error);
    }
    font-size: var(--font-size-sm);
  }
}

// Form select styling
@mixin select-dropdown-styling($dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $dark {
      background-color: var(--color-dark-surface-elevated);
      border: 1px solid var(--color-dark-border);
    } @else {
      background-color: var(--color-surface);
      border: 1px solid var(--color-border);
    }
    border-radius: var(--radius-md);
  } @else {
    // Legacy select dropdown styling
    @if $dark {
      background-color: var(--color-dark-surface-elevated);
      border: 1px solid var(--color-dark-border);
    } @else {
      background-color: var(--color-surface);
      border: 1px solid var(--color-border);
    }
    border-radius: var(--radius-md);
  }
}

// Form select option styling
@mixin select-option-styling($state: null, $dark: false) {
  @if $use-new-form-tokens {
    // Use fallback values since the token system is still being developed
    @if $state == 'hover' {
      @if $dark {
        background-color: var(--color-dark-surface-hover);
      } @else {
        background-color: var(--color-surface-hover);
      }
    } @else if $state == 'selected' {
      @if $dark {
        background-color: rgba(var(--color-dark-primary-rgb), 0.1);
        color: var(--color-dark-primary);
      } @else {
        background-color: rgba(var(--color-primary-rgb), 0.1);
        color: var(--color-primary);
      }
    } @else {
      @if $dark {
        background-color: transparent;
        color: var(--color-dark-text);
      } @else {
        background-color: transparent;
        color: var(--color-text);
      }
    }
  } @else {
    // Legacy select option styling
    @if $state == 'hover' {
      @if $dark {
        background-color: var(--color-dark-surface-hover);
      } @else {
        background-color: var(--color-surface-hover);
      }
    } @else if $state == 'selected' {
      @if $dark {
        background-color: rgba(var(--color-dark-primary-rgb), 0.1);
        color: var(--color-dark-primary);
      } @else {
        background-color: rgba(var(--color-primary-rgb), 0.1);
        color: var(--color-primary);
      }
    } @else {
      @if $dark {
        background-color: transparent;
        color: var(--color-dark-text);
      } @else {
        background-color: transparent;
        color: var(--color-text);
      }
    }
  }
} 