/**
 * Button Component Tokens
 * 
 * Core token values for button styling with enhanced gradient support.
 * IMPORTANT: Direct imports to avoid circular dependencies.
 */

// Direct imports of core tokens instead of through tokens/index
@import '../core/colors';
@import '../core/spacing';
@import '../core/typography';

// ----------------------------------------------------------------------------
// BUTTON BASE TOKENS
// ----------------------------------------------------------------------------
$button-base-tokens: (
  'border-radius': var(--radius-md),
  'font-weight': 600,
  'transition': 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',
  'icon-spacing': var(--space-2),
  'disabled-opacity': 0.65,
  'focus-ring-width': 3px,
  'focus-ring-offset': 1px,
  'spinner-size': 1.25rem
);

// ----------------------------------------------------------------------------
// BUTTON SIZE TOKENS
// ----------------------------------------------------------------------------
$button-size-tokens: (
  'sm': (
    'padding-x': var(--space-3),
    'padding-y': var(--space-1-5),
    'font-size': var(--text-sm),
    'padding': 'calc(var(--space-1-5)) calc(var(--space-3))'
  ),
  'md': (
    'padding-x': var(--space-4),
    'padding-y': var(--space-2-5),
    'font-size': var(--text-md),
    'padding': 'calc(var(--space-2-5)) calc(var(--space-4))'
  ),
  'lg': (
    'padding-x': var(--space-6),
    'padding-y': var(--space-3),
    'font-size': var(--text-lg),
    'padding': 'calc(var(--space-3)) calc(var(--space-6))'
  )
);

// ----------------------------------------------------------------------------
// BUTTON VARIANT TOKENS
// ----------------------------------------------------------------------------
// Button tokens with enhanced gradient support
$button-variant-tokens: (
  'primary': (
    'bg': #8cd867,
    'gradient-start': #8cd867,
    'gradient-end': #78c241,
    'text': #1a1f2b,
    'border': none,
    'hover': (
      'bg': #78c241,
      'shadow': '0 4px 10px -2px rgba(120, 194, 65, 0.3)',
      'transform': 'translateY(-2px)',
      'gradient-start': #78c241,
      'gradient-end': #8cd867
    ),
    'focus': (
      'ring': rgba(140, 216, 103, 0.25),
      'ring-opacity': 0.25
    ),
    'active': (
      'transform': 'translateY(0)',
      'shadow': '0 2px 5px -1px rgba(120, 194, 65, 0.2)',
      'gradient-start': darken(#8cd867, 8%),
      'gradient-end': darken(#78c241, 8%)
    ),
    'dark': (
      'gradient-start': #8cd867,
      'gradient-end': #78c241,
      'hover': (
        'gradient-start': #78c241,
        'gradient-end': #8cd867,
        'shadow': '0 4px 10px -2px rgba(120, 194, 65, 0.4)'
      ),
      'active': (
        'gradient-start': darken(#8cd867, 5%),
        'gradient-end': darken(#78c241, 5%)
      )
    ),
    'spinner': (
      'border-color': rgba(26, 31, 43, 0.3),
      'border-top-color': #1a1f2b
    )
  ),
  'secondary': (
    'bg': transparent,
    'text': #8cd867,
    'border': '1px solid #8cd867',
    'hover': (
      'bg': rgba(140, 216, 103, 0.05),
      'transform': 'translateY(-1px)',
      'shadow': '0 2px 5px rgba(120, 194, 65, 0.05)'
    ),
    'active': (
      'transform': 'translateY(0)',
      'bg': rgba(140, 216, 103, 0.1),
      'shadow': 'none'
    ),
    'focus': (
      'ring': rgba(140, 216, 103, 0.2),
      'ring-opacity': 0.2
    ),
    'dark': (
      'bg': transparent,
      'text': #8cd867,
      'border': '1px solid #8cd867',
      'hover': (
        'bg': rgba(140, 216, 103, 0.1),
        'shadow': '0 2px 5px rgba(120, 194, 65, 0.2)'
      ),
      'active': (
        'bg': rgba(140, 216, 103, 0.15)
      ),
      'focus': (
        'ring': rgba(140, 216, 103, 0.25)
      )
    ),
    'spinner': (
      'border-color': rgba(140, 216, 103, 0.3),
      'border-top-color': #8cd867
    )
  ),
  'outline': (
    'bg': transparent,
    'text': var(--color-primary),
    'border': '1px solid var(--color-primary)',
    'hover': (
      'bg': rgba(var(--color-primary-rgb), 0.05),
      'transform': 'translateY(-1px)',
      'shadow': '0 2px 5px rgba(var(--color-primary-rgb), 0.05)'
    ),
    'active': (
      'transform': 'translateY(0)',
      'bg': rgba(var(--color-primary-rgb), 0.1),
      'shadow': 'none'
    ),
    'focus': (
      'ring': rgba(var(--color-primary-rgb), 0.15),
      'ring-opacity': 0.15
    ),
    'dark': (
      'text': var(--color-dark-primary),
      'border': '1px solid var(--color-dark-primary)',
      'hover': (
        'bg': rgba(var(--color-dark-primary-rgb), 0.1)
      ),
      'active': (
        'bg': rgba(var(--color-dark-primary-rgb), 0.15)
      ),
      'focus': (
        'ring': rgba(var(--color-dark-primary-rgb), 0.2)
      )
    ),
    'spinner': (
      'border-color': rgba(var(--color-primary-rgb), 0.3),
      'border-top-color': var(--color-primary)
    )
  ),
  'text': (
    'bg': transparent,
    'text': var(--color-primary),
    'border': none,
    'padding-adjustment': '-0.625rem -1rem', // Negative padding to maintain alignment
    'hover': (
      'bg': rgba(var(--color-primary-rgb), 0.05)
    ),
    'active': (
      'bg': rgba(var(--color-primary-rgb), 0.1)
    ),
    'focus': (
      'ring': rgba(var(--color-primary-rgb), 0.1),
      'ring-opacity': 0.1
    ),
    'dark': (
      'text': var(--color-dark-primary),
      'hover': (
        'bg': rgba(var(--color-dark-primary-rgb), 0.1)
      ),
      'active': (
        'bg': rgba(var(--color-dark-primary-rgb), 0.15)
      ),
      'focus': (
        'ring': rgba(var(--color-dark-primary-rgb), 0.15)
      )
    ),
    'spinner': (
      'border-color': rgba(var(--color-primary-rgb), 0.3),
      'border-top-color': var(--color-primary)
    )
  )
);

// ----------------------------------------------------------------------------
// TOKEN ACCESS FUNCTIONS
// ----------------------------------------------------------------------------

/**
 * Get button token value with improved error handling and fallbacks
 * 
 * @param {String} $variant - Button variant (primary, secondary, outline, text)
 * @param {String} $property - Property to access
 * @param {String} $state - Button state (null, hover, focus)
 * @param {Boolean} $dark - Whether to use dark theme values
 * @return {*} Token value
 */
@function button-token($variant, $property, $state: null, $dark: false) {
  @if not map-has-key($button-variant-tokens, $variant) {
    @error 'Unknown button variant: #{$variant}';
    @return null;
  }
  
  $variant-map: map-get($button-variant-tokens, $variant);
  $result: null;
  
  // Handle dark theme with graceful fallback
  @if $dark and map-has-key($variant-map, 'dark') {
    $dark-map: map-get($variant-map, 'dark');
    
    @if $state and map-has-key($dark-map, $state) {
      $state-map: map-get($dark-map, $state);
      
      @if map-has-key($state-map, $property) {
        $result: map-get($state-map, $property);
      }
    } @else if map-has-key($dark-map, $property) {
      $result: map-get($dark-map, $property);
    }
  }
  
  // If no dark theme value found, continue with regular lookup
  @if $result == null {
    @if $state and map-has-key($variant-map, $state) {
      $state-map: map-get($variant-map, $state);
      
      @if map-has-key($state-map, $property) {
        $result: map-get($state-map, $property);
      }
    } @else if map-has-key($variant-map, $property) {
      $result: map-get($variant-map, $property);
    }
  }
  
  @if $result == null {
    @warn 'Button token not found: #{$variant}.#{$property} for state: #{$state}, dark: #{$dark}';
  }
  
  @return $result;
}

/**
 * Get button size token with improved handling for padding
 * 
 * @param {String} $size - Size variant (sm, md, lg)
 * @param {String} $property - Property to access
 * @return {*} Size value
 */
@function button-size($size, $property) {
  @if not map-has-key($button-size-tokens, $size) {
    @error 'Unknown button size: #{$size}';
    @return null;
  }
  
  $size-map: map-get($button-size-tokens, $size);
  
  @if map-has-key($size-map, $property) {
    @return map-get($size-map, $property);
  }
  
  @warn 'Button size token not found: #{$size}.#{$property}';
  @return null;
}

/**
 * Get base button token
 * 
 * @param {String} $property - Property to access
 * @return {*} Base token value
 */
@function button-base($property) {
  @if map-has-key($button-base-tokens, $property) {
    @return map-get($button-base-tokens, $property);
  }
  
  @warn 'Button base token not found: #{$property}';
  @return null;
} 