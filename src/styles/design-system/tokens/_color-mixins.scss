/**
 * Color Mixins
 * 
 * This file provides standardized color application patterns as mixins.
 * These mixins help ensure consistent color usage across components.
 */

@import 'core/colors';
@import './color-maps';

// ----------------------------------------------------------------------------
// TEXT COLOR MIXINS
// ----------------------------------------------------------------------------

/**
 * Apply primary text color
 * 
 * @param {String} $shade - The shade of the primary color (default: 500)
 */
@mixin text-primary($shade: '500') {
  color: color('primary', $shade);
}

/**
 * Apply secondary text color
 * 
 * @param {String} $shade - The shade of the secondary color (default: 500)
 */
@mixin text-secondary($shade: '500') {
  color: color('secondary', $shade);
}

/**
 * Apply gray text color
 * 
 * @param {String} $shade - The shade of gray (default: 800)
 */
@mixin text-gray($shade: '800') {
  color: color('gray', $shade);
}

/**
 * Apply feedback text color
 * 
 * @param {String} $type - The feedback type (success, error, warning, info)
 * @param {String} $shade - The shade of the feedback color (default: 700)
 */
@mixin text-feedback($type, $shade: '700') {
  @if $type == 'success' {
    color: color('success', $shade);
  } @else if $type == 'error' {
    color: color('error', $shade);
  } @else if $type == 'warning' {
    color: color('warning', $shade);
  } @else if $type == 'info' {
    color: color('info', $shade);
  } @else {
    @warn "Invalid feedback type: #{$type}";
  }
}

// ----------------------------------------------------------------------------
// BACKGROUND COLOR MIXINS
// ----------------------------------------------------------------------------

/**
 * Apply primary background color
 * 
 * @param {String} $shade - The shade of the primary color (default: 500)
 */
@mixin bg-primary($shade: '500') {
  background-color: color('primary', $shade);
}

/**
 * Apply secondary background color
 * 
 * @param {String} $shade - The shade of the secondary color (default: 500)
 */
@mixin bg-secondary($shade: '500') {
  background-color: color('secondary', $shade);
}

/**
 * Apply gray background color
 * 
 * @param {String} $shade - The shade of gray (default: 100)
 */
@mixin bg-gray($shade: '100') {
  background-color: color('gray', $shade);
}

/**
 * Apply feedback background color
 * 
 * @param {String} $type - The feedback type (success, error, warning, info)
 * @param {String} $shade - The shade of the feedback color (default: 50)
 */
@mixin bg-feedback($type, $shade: '50') {
  @if $type == 'success' {
    background-color: color('success', $shade);
  } @else if $type == 'error' {
    background-color: color('error', $shade);
  } @else if $type == 'warning' {
    background-color: color('warning', $shade);
  } @else if $type == 'info' {
    background-color: color('info', $shade);
  } @else {
    @warn "Invalid feedback type: #{$type}";
  }
}

// ----------------------------------------------------------------------------
// BORDER COLOR MIXINS
// ----------------------------------------------------------------------------

/**
 * Apply primary border color
 * 
 * @param {String} $shade - The shade of the primary color (default: 500)
 * @param {String} $width - The border width (default: 1px)
 * @param {String} $style - The border style (default: solid)
 */
@mixin border-primary($shade: '500', $width: 1px, $style: solid) {
  border: $width $style color('primary', $shade);
}

/**
 * Apply secondary border color
 * 
 * @param {String} $shade - The shade of the secondary color (default: 500)
 * @param {String} $width - The border width (default: 1px)
 * @param {String} $style - The border style (default: solid)
 */
@mixin border-secondary($shade: '500', $width: 1px, $style: solid) {
  border: $width $style color('secondary', $shade);
}

/**
 * Apply gray border color
 * 
 * @param {String} $shade - The shade of gray (default: 200)
 * @param {String} $width - The border width (default: 1px)
 * @param {String} $style - The border style (default: solid)
 */
@mixin border-gray($shade: '200', $width: 1px, $style: solid) {
  border: $width $style color('gray', $shade);
}

/**
 * Apply feedback border color
 * 
 * @param {String} $type - The feedback type (success, error, warning, info)
 * @param {String} $shade - The shade of the feedback color (default: 300)
 * @param {String} $width - The border width (default: 1px)
 * @param {String} $style - The border style (default: solid)
 */
@mixin border-feedback($type, $shade: '300', $width: 1px, $style: solid) {
  @if $type == 'success' {
    border: $width $style color('success', $shade);
  } @else if $type == 'error' {
    border: $width $style color('error', $shade);
  } @else if $type == 'warning' {
    border: $width $style color('warning', $shade);
  } @else if $type == 'info' {
    border: $width $style color('info', $shade);
  } @else {
    @warn "Invalid feedback type: #{$type}";
  }
}

// ----------------------------------------------------------------------------
// COMPONENT COLOR MIXINS
// ----------------------------------------------------------------------------

/**
 * Apply button color variations
 * 
 * @param {String} $color - The color family (primary, secondary, success, etc.)
 * @param {Boolean} $outline - Whether to use outline style (default: false)
 */
@mixin button-color-variant($color, $outline: false) {
  @if $outline {
    background-color: transparent;
    color: color($color);
    border: 1px solid color($color);
    
    &:hover, &:focus {
      background-color: color($color, '50');
    }
    
    &:active {
      background-color: color($color, '100');
    }
  } @else {
    background-color: color($color);
    color: $color-white;
    border: 1px solid color($color);
    
    &:hover, &:focus {
      background-color: color($color, '600');
      border-color: color($color, '600');
    }
    
    &:active {
      background-color: color($color, '700');
      border-color: color($color, '700');
    }
  }
  
  &:disabled, &.disabled {
    opacity: 0.65;
    pointer-events: none;
  }
}

/**
 * Apply feedback alert styling
 * 
 * @param {String} $type - The feedback type (success, error, warning, info)
 */
@mixin alert-variant($type) {
  background-color: color($type, '50');
  color: color($type, '700');
  border: 1px solid color($type, '300');
}

/**
 * Apply focus ring styling
 * 
 * @param {String} $color - The color family (primary, secondary, etc.)
 * @param {String} $shade - The shade of the color (default: 500)
 * @param {Number} $width - The outline width (default: 2px)
 * @param {Number} $offset - The outline offset (default: 2px)
 */
@mixin focus-ring($color: 'primary', $shade: '500', $width: 2px, $offset: 2px) {
  outline: $width solid rgba(color($color, $shade), 0.5);
  outline-offset: $offset;
}

// Export a flag to indicate this file was imported
$color-mixins-imported: true; 