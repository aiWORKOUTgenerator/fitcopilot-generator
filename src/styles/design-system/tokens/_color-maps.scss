/**
 * Color Maps
 * 
 * This file provides maps and functions to access colors programmatically.
 * It creates structured data collections for colors that can be accessed with functions.
 */

@import 'core/colors';

// ----------------------------------------------------------------------------
// COLOR MAPS
// ----------------------------------------------------------------------------

// Primary color map
$color-primary-map: (
  '50': $color-primary-50,
  '100': $color-primary-100,
  '200': $color-primary-200,
  '300': $color-primary-300,
  '400': $color-primary-400,
  '500': $color-primary-500,
  '600': $color-primary-600,
  '700': $color-primary-700,
  '800': $color-primary-800,
  '900': $color-primary-900,
);

// Secondary color map
$color-secondary-map: (
  '50': $color-secondary-50,
  '100': $color-secondary-100,
  '200': $color-secondary-200,
  '300': $color-secondary-300,
  '400': $color-secondary-400,
  '500': $color-secondary-500,
  '600': $color-secondary-600,
  '700': $color-secondary-700,
  '800': $color-secondary-800,
  '900': $color-secondary-900,
);

// Gray color map
$color-gray-map: (
  '50': $color-gray-50,
  '100': $color-gray-100,
  '200': $color-gray-200,
  '300': $color-gray-300,
  '400': $color-gray-400,
  '500': $color-gray-500,
  '600': $color-gray-600,
  '700': $color-gray-700,
  '800': $color-gray-800,
  '900': $color-gray-900,
  'white': $color-white,
  'black': $color-black,
);

// Success color map
$color-success-map: (
  '50': $color-success-50,
  '100': $color-success-100,
  '200': $color-success-200,
  '300': $color-success-300,
  '400': $color-success-400,
  '500': $color-success-500,
  '600': $color-success-600,
  '700': $color-success-700,
  '800': $color-success-800,
  '900': $color-success-900,
);

// Error color map
$color-error-map: (
  '50': $color-error-50,
  '100': $color-error-100,
  '200': $color-error-200,
  '300': $color-error-300,
  '400': $color-error-400,
  '500': $color-error-500,
  '600': $color-error-600,
  '700': $color-error-700,
  '800': $color-error-800,
  '900': $color-error-900,
);

// Warning color map
$color-warning-map: (
  '50': $color-warning-50,
  '100': $color-warning-100,
  '200': $color-warning-200,
  '300': $color-warning-300,
  '400': $color-warning-400,
  '500': $color-warning-500,
  '600': $color-warning-600,
  '700': $color-warning-700,
  '800': $color-warning-800,
  '900': $color-warning-900,
);

// Info color map
$color-info-map: (
  '50': $color-info-50,
  '100': $color-info-100,
  '200': $color-info-200,
  '300': $color-info-300,
  '400': $color-info-400,
  '500': $color-info-500,
  '600': $color-info-600,
  '700': $color-info-700,
  '800': $color-info-800,
  '900': $color-info-900,
);

// All colors map
$color-palette: (
  'primary': $color-primary-map,
  'secondary': $color-secondary-map,
  'gray': $color-gray-map,
  'success': $color-success-map,
  'error': $color-error-map,
  'warning': $color-warning-map,
  'info': $color-info-map,
);

// Semantic UI maps
$color-semantic: (
  'text': $color-gray-800,
  'text-light': $color-gray-600,
  'text-muted': $color-gray-500,
  'background': $color-white,
  'border': $color-gray-200,
  'border-hover': $color-gray-400,
  'border-focus': $color-primary-500,
  'surface': $color-white,
  'surface-accent': $color-gray-50,
  'focus-ring': rgba($color-primary-500, 0.5),
);

// ----------------------------------------------------------------------------
// COLOR ACCESS FUNCTIONS
// ----------------------------------------------------------------------------

/**
 * Get a color from the palette
 *
 * @param {String} $family - The color family (primary, secondary, etc.)
 * @param {String} $shade - The shade of the color (50, 100, 200, etc.)
 * @return {Color} The color value
 */
@function color($family, $shade: '500') {
  @if map-has-key($color-palette, $family) {
    $family-map: map-get($color-palette, $family);
    
    @if map-has-key($family-map, $shade) {
      @return map-get($family-map, $shade);
    }
    
    @warn "Color shade `#{$shade}` not found in family `#{$family}`.";
    @return null;
  }
  
  @warn "Color family `#{$family}` not found.";
  @return null;
}

/**
 * Get a semantic color
 *
 * @param {String} $name - The semantic color name
 * @return {Color} The color value
 */
@function semantic-color($name) {
  @if map-has-key($color-semantic, $name) {
    @return map-get($color-semantic, $name);
  }
  
  @warn "Semantic color `#{$name}` not found.";
  @return null;
}

/**
 * Get a specific shade of the primary color
 *
 * @param {String} $shade - The shade of the primary color
 * @return {Color} The primary color at the specified shade
 */
@function primary($shade: '500') {
  @return color('primary', $shade);
}

/**
 * Get a specific shade of the secondary color
 *
 * @param {String} $shade - The shade of the secondary color
 * @return {Color} The secondary color at the specified shade
 */
@function secondary($shade: '500') {
  @return color('secondary', $shade);
}

/**
 * Get a specific shade of gray
 *
 * @param {String} $shade - The shade of gray
 * @return {Color} The gray color at the specified shade
 */
@function gray($shade: '500') {
  @return color('gray', $shade);
}

// Export a flag to indicate this file was imported
$color-maps-imported: true; 