/**
 * Card Mixins
 * 
 * These mixins provide reusable styles for card components.
 */

@import '../tokens/semantic/surfaces';
@import '../tokens/semantic/motion';

/// Card styling mixin that applies all card styles at once
/// @param {Boolean} $dark [false] - Whether to use dark theme styles
@mixin card-styling($dark: false) {
  @include card-bg-color(null, null, $dark);
  @include card-border-radius();
  @include card-shadow(null, null, $dark);
  @include card-padding();
  border: 1px solid if($dark, var(--color-dark-border), var(--color-border));
}

/// Card background color mixin
/// @param {String} $type [card] - Surface type
/// @param {String} $state [null] - State (hover, active, etc.)
/// @param {Boolean} $dark [false] - Whether to use dark theme styles
@mixin card-bg-color($type: 'card', $state: null, $dark: false) {
  background-color: surface-style(if($type, $type, 'card'), 'bg', $state, $dark);
}

/// Card border radius mixin
@mixin card-border-radius() {
  border-radius: $card-border-radius;
}

/// Card shadow mixin
/// @param {String} $type [card] - Surface type
/// @param {String} $state [null] - State (hover, active, etc.)
/// @param {Boolean} $dark [false] - Whether to use dark theme styles
@mixin card-shadow($type: 'card', $state: null, $dark: false) {
  box-shadow: surface-style(if($type, $type, 'card'), 'shadow', $state, $dark);
}

/// Card padding mixin
@mixin card-padding() {
  padding: $card-padding;
}

/// Card hover effect mixin
@mixin card-hover() {
  &:hover {
    @include card-bg-color('card', 'hover');
    @include card-shadow('card', 'hover');
    transform: translateY(-4px);
    
    .dark-theme & {
      @include card-bg-color('card', 'hover', true);
      @include card-shadow('card', 'hover', true);
    }
  }
}

/// Apply a border color based on semantic purpose
/// @param {String} $type [border] - Border type (border, border-focus, etc.)
@mixin border-color($type: 'border') {
  @if $type == 'border' {
    border-color: var(--color-border);
    
    .dark-theme & {
      border-color: var(--color-dark-border);
    }
  } @else if $type == 'border-focus' {
    border-color: var(--color-border-focus);
    
    .dark-theme & {
      border-color: var(--color-dark-border-focus);
    }
  } @else if $type == 'border-error' {
    border-color: var(--color-error);
    
    .dark-theme & {
      border-color: var(--color-dark-error);
    }
  } @else if $type == 'border-success' {
    border-color: var(--color-success);
    
    .dark-theme & {
      border-color: var(--color-dark-success);
    }
  } @else if $type == 'border-warning' {
    border-color: var(--color-warning);
    
    .dark-theme & {
      border-color: var(--color-dark-warning);
    }
  } @else if $type == 'border-primary' {
    border-color: var(--color-primary);
    
    .dark-theme & {
      border-color: var(--color-dark-primary);
    }
  }
}

/**
 * Hover state for surface elements
 * 
 * @param {String} $color - Base color token
 * @param {Number} $opacity - Opacity for hover state (default: 0.05)
 * @param {Boolean} $dark - Whether to include dark mode styles
 */
@mixin hover-state($color, $opacity: 0.05, $dark: false) {
  transition: transition-preset('color');
  
  &:hover, &:focus {
    background-color: rgba(var(--color-#{$color}-rgb), $opacity);
  }
  
  @if $dark {
    .dark-theme &:hover, .dark-theme &:focus {
      background-color: rgba(var(--color-dark-#{$color}-rgb), $opacity + 0.05);
    }
  }
} 