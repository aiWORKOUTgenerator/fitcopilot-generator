/**
 * Button Mixins
 * 
 * Mixins for styling buttons with consistent theming and gradient support
 */

// Import tokens directly - avoiding circular dependency
@import '../tokens/components/button-tokens';

/**
 * Button base styles mixin - applies common button styles
 */
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-family: var(--font-base);
  font-weight: button-base('font-weight');
  border-radius: button-base('border-radius');
  cursor: pointer;
  transition: button-base('transition');
  position: relative;
  text-decoration: none;
  user-select: none;
  line-height: 1.5;
  white-space: nowrap;
  overflow: hidden;
  
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    box-shadow: 0 0 0 3px var(--color-focus-ring);
  }
}

/**
 * Button gradient mixin - encapsulates gradient logic
 * 
 * @param {String} $start-color - Gradient start color
 * @param {String} $end-color - Gradient end color 
 */
@mixin button-gradient($start-color, $end-color) {
  background: linear-gradient(to right, $start-color, $end-color);
  
  // Subtle gradient shift on hover for better visual feedback
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(to right, $end-color, $start-color);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 0;
    border-radius: inherit;
  }
  
  &:hover:not(:disabled)::before {
    opacity: 1;
  }
  
  & > * {
    position: relative;
    z-index: 1;
  }
}

/**
 * Button styling mixin - applies styling based on variant
 * 
 * @param {String} $variant - Button variant (primary, secondary, outline, text)
 */
@mixin button-styling($variant) {
  @if $variant == 'primary' {
    // Apply gradient for primary buttons
    @include button-gradient(
      button-token($variant, 'gradient-start', null) or button-token($variant, 'bg'), 
      button-token($variant, 'gradient-end', null) or darken(button-token($variant, 'bg'), 10%)
    );
    color: button-token($variant, 'text');
    border: button-token($variant, 'border');
    
    &:hover:not(:disabled) {
      @if button-token($variant, 'transform', 'hover') {
        transform: button-token($variant, 'transform', 'hover');
      }
      @if button-token($variant, 'shadow', 'hover') {
        box-shadow: #{button-token($variant, 'shadow', 'hover')};
      }
    }
    
    &:active:not(:disabled) {
      @if button-token($variant, 'transform', 'active') {
        transform: button-token($variant, 'transform', 'active');
      }
      @if button-token($variant, 'shadow', 'active') {
        box-shadow: button-token($variant, 'shadow', 'active');
      }
    }
  } @else {
    // Non-gradient buttons
    background-color: button-token($variant, 'bg');
    color: button-token($variant, 'text');
    border: button-token($variant, 'border');
    
    @if $variant == 'text' and button-token($variant, 'padding-adjustment') {
      margin: button-token($variant, 'padding-adjustment');
    }
    
    &:hover:not(:disabled) {
      background-color: button-token($variant, 'bg', 'hover');
      
      @if button-token($variant, 'transform', 'hover') {
        transform: button-token($variant, 'transform', 'hover');
      }
    }
    
    &:active:not(:disabled) {
      @if button-token($variant, 'bg', 'active') {
        background-color: button-token($variant, 'bg', 'active');
      }
      
      @if button-token($variant, 'transform', 'active') {
        transform: button-token($variant, 'transform', 'active');
      }
    }
  }
  
  // Dark theme styles with automatic variant handling
  .dark-theme & {
    @if $variant == 'primary' and button-token($variant, 'gradient-start', null, true) {
      @include button-gradient(
        button-token($variant, 'gradient-start', null, true), 
        button-token($variant, 'gradient-end', null, true)
      );
    } @else if button-token($variant, 'bg', null, true) {
      background-color: button-token($variant, 'bg', null, true);
    }
    
    @if button-token($variant, 'text', null, true) {
      color: button-token($variant, 'text', null, true);
    }
    
    @if button-token($variant, 'border', null, true) {
      border: button-token($variant, 'border', null, true);
    }
    
    &:hover:not(:disabled) {
      @if button-token($variant, 'bg', 'hover', true) {
        background-color: button-token($variant, 'bg', 'hover', true);
      }
    }
  }
}

/**
 * Button size mixin - applies size-specific styling
 * 
 * @param {String} $size - Button size (sm, md, lg) 
 */
@mixin button-size($size) {
  padding: button-size($size, 'padding');
  font-size: button-size($size, 'font-size');
}

/**
 * Disabled state mixin for buttons
 */
@mixin disabled-state() {
  opacity: button-base('disabled-opacity');
  cursor: not-allowed;
  pointer-events: none;
  
  &::before {
    display: none;
  }
}

/**
 * Loading state mixin for buttons
 * 
 * @param {String} $variant - Button variant
 */
@mixin loading-state($variant) {
  position: relative;
  
  .btn__text {
    visibility: hidden;
  }
  
  &::after {
    content: '';
    position: absolute;
    width: 1rem;
    height: 1rem;
    top: calc(50% - 0.5rem);
    left: calc(50% - 0.5rem);
    border-radius: 50%;
    border: 2px solid button-token($variant, 'border-color', 'spinner') or rgba(255, 255, 255, 0.3);
    border-top-color: button-token($variant, 'border-top-color', 'spinner') or white;
    animation: button-spin 0.8s linear infinite;
    z-index: 2;
  }
  
  .dark-theme &::after {
    @if button-token($variant, 'border-color', 'spinner', true) {
      border-color: button-token($variant, 'border-color', 'spinner', true);
      border-top-color: button-token($variant, 'border-top-color', 'spinner', true);
    }
  }
}

@keyframes button-spin {
  to {
    transform: rotate(360deg);
  }
} 