/**
 * Button Mixins
 * 
 * Refined mixins for styling buttons with enhanced gradient support and optimized transitions
 */

// Import tokens directly - avoiding circular dependency
@import '../tokens/components/button-tokens';

/**
 * Button base styles mixin - applies common button styles
 */
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-family: var(--font-base);
  font-weight: button-base('font-weight');
  border-radius: button-base('border-radius');
  cursor: pointer;
  transition: button-base('transition');
  position: relative;
  text-decoration: none;
  user-select: none;
  line-height: 1.5;
  white-space: nowrap;
  overflow: hidden;
  will-change: transform, box-shadow, background-color;
  
  // Focus state handling
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    box-shadow: 0 0 0 button-base('focus-ring-width') var(--color-focus-ring);
    outline: none;
  }
}

/**
 * Button gradient mixin - encapsulates gradient logic with optimized transitions
 * 
 * @param {String} $start-color - Gradient start color
 * @param {String} $end-color - Gradient end color 
 * @param {String} $hover-start-color - Hover gradient start color (optional)
 * @param {String} $hover-end-color - Hover gradient end color (optional)
 */
@mixin button-gradient($start-color, $end-color, $hover-start-color: null, $hover-end-color: null) {
  background: linear-gradient(to right, $start-color, $end-color);
  
  @if $hover-start-color and $hover-end-color {
    // Enhanced gradient transition method for smoother hover effects
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(to right, $hover-start-color, $hover-end-color);
      opacity: 0;
      transition: opacity 0.3s ease;
      z-index: 0;
      border-radius: inherit;
      will-change: opacity;
    }
    
    &:hover:not(:disabled)::before {
      opacity: 1;
    }
  } @else {
    // Fallback hover method using the reverse gradient
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(to right, $end-color, $start-color);
      opacity: 0;
      transition: opacity 0.3s ease;
      z-index: 0;
      border-radius: inherit;
      will-change: opacity;
    }
    
    &:hover:not(:disabled)::before {
      opacity: 1;
    }
  }
  
  & > * {
    position: relative;
    z-index: 1;
  }
}

/**
 * Button styling mixin - applies styling based on variant with enhanced state handling
 * 
 * @param {String} $variant - Button variant (primary, secondary, outline, text)
 */
@mixin button-styling($variant) {
  @if $variant == 'primary' {
    // Apply gradient for primary buttons
    $start-color: button-token($variant, 'gradient-start');
    $end-color: button-token($variant, 'gradient-end');
    
    // Create fallbacks if tokens are not available
    @if not $start-color {
      $start-color: button-token($variant, 'bg');
    }
    
    @if not $end-color {
      $end-color: button-token($variant, 'bg');
      @if $end-color {
        $end-color: darken($end-color, 10%);
      }
    }
    
    $hover-start: button-token($variant, 'gradient-start', 'hover');
    $hover-end: button-token($variant, 'gradient-end', 'hover');
    
    @include button-gradient($start-color, $end-color, $hover-start, $hover-end);
    color: button-token($variant, 'text');
    border: button-token($variant, 'border');
    
    &:hover:not(:disabled) {
      @if button-token($variant, 'transform', 'hover') {
        transform: button-token($variant, 'transform', 'hover');
      }
      @if button-token($variant, 'shadow', 'hover') {
        box-shadow: #{button-token($variant, 'shadow', 'hover')};
      }
    }
    
    &:active:not(:disabled) {
      @if button-token($variant, 'transform', 'active') {
        transform: button-token($variant, 'transform', 'active');
      }
      @if button-token($variant, 'shadow', 'active') {
        box-shadow: button-token($variant, 'shadow', 'active');
      }
      
      // Optional active state gradient override
      @if button-token($variant, 'gradient-start', 'active') and button-token($variant, 'gradient-end', 'active') {
        background: linear-gradient(
          to right, 
          button-token($variant, 'gradient-start', 'active'), 
          button-token($variant, 'gradient-end', 'active')
        );
        
        &::before {
          opacity: 0;
        }
      }
    }
    
    &:focus-visible {
      @if button-token($variant, 'ring', 'focus') {
        box-shadow: 0 0 0 button-base('focus-ring-width') button-token($variant, 'ring', 'focus');
      }
    }
  } @else {
    // Non-gradient buttons
    background-color: button-token($variant, 'bg');
    color: button-token($variant, 'text');
    border: button-token($variant, 'border');
    
    @if $variant == 'text' and button-token($variant, 'padding-adjustment') {
      margin: button-token($variant, 'padding-adjustment');
    }
    
    &:hover:not(:disabled) {
      background-color: button-token($variant, 'bg', 'hover');
      
      @if button-token($variant, 'transform', 'hover') {
        transform: button-token($variant, 'transform', 'hover');
      }
      
      @if button-token($variant, 'shadow', 'hover') {
        box-shadow: button-token($variant, 'shadow', 'hover');
      }
    }
    
    &:active:not(:disabled) {
      @if button-token($variant, 'bg', 'active') {
        background-color: button-token($variant, 'bg', 'active');
      }
      
      @if button-token($variant, 'transform', 'active') {
        transform: button-token($variant, 'transform', 'active');
      }
      
      @if button-token($variant, 'shadow', 'active') {
        box-shadow: button-token($variant, 'shadow', 'active');
      }
    }
    
    &:focus-visible {
      @if button-token($variant, 'ring', 'focus') {
        box-shadow: 0 0 0 button-base('focus-ring-width') button-token($variant, 'ring', 'focus');
      }
    }
  }
  
  // Dark theme styles with automatic variant handling
  .dark-theme & {
    @if $variant == 'primary' {
      $dark-start: button-token($variant, 'gradient-start', null, true);
      $dark-end: button-token($variant, 'gradient-end', null, true);
      $dark-hover-start: button-token($variant, 'gradient-start', 'hover', true);
      $dark-hover-end: button-token($variant, 'gradient-end', 'hover', true);
      
      @if $dark-start and $dark-end {
        @include button-gradient($dark-start, $dark-end, $dark-hover-start, $dark-hover-end);
      }
      
      &:hover:not(:disabled) {
        @if button-token($variant, 'shadow', 'hover', true) {
          box-shadow: button-token($variant, 'shadow', 'hover', true);
        }
      }
      
      &:active:not(:disabled) {
        @if button-token($variant, 'gradient-start', 'active', true) and button-token($variant, 'gradient-end', 'active', true) {
          background: linear-gradient(
            to right, 
            button-token($variant, 'gradient-start', 'active', true), 
            button-token($variant, 'gradient-end', 'active', true)
          );
          
          &::before {
            opacity: 0;
          }
        }
      }
      
      &:focus-visible {
        @if button-token($variant, 'ring', 'focus', true) {
          box-shadow: 0 0 0 button-base('focus-ring-width') button-token($variant, 'ring', 'focus', true);
        }
      }
    } @else {
      @if button-token($variant, 'bg', null, true) {
        background-color: button-token($variant, 'bg', null, true);
      }
      
      @if button-token($variant, 'text', null, true) {
        color: button-token($variant, 'text', null, true);
      }
      
      @if button-token($variant, 'border', null, true) {
        border: button-token($variant, 'border', null, true);
      }
      
      &:hover:not(:disabled) {
        @if button-token($variant, 'bg', 'hover', true) {
          background-color: button-token($variant, 'bg', 'hover', true);
        }
        
        @if button-token($variant, 'shadow', 'hover', true) {
          box-shadow: button-token($variant, 'shadow', 'hover', true);
        }
      }
      
      &:active:not(:disabled) {
        @if button-token($variant, 'bg', 'active', true) {
          background-color: button-token($variant, 'bg', 'active', true);
        }
      }
      
      &:focus-visible {
        @if button-token($variant, 'ring', 'focus', true) {
          box-shadow: 0 0 0 button-base('focus-ring-width') button-token($variant, 'ring', 'focus', true);
        }
      }
    }
  }
}

/**
 * Button size mixin - applies size-specific styling
 * 
 * @param {String} $size - Button size (sm, md, lg) 
 */
@mixin button-size($size) {
  padding: button-size($size, 'padding');
  font-size: button-size($size, 'font-size');
}

/**
 * Disabled state mixin for buttons with optimized visuals
 */
@mixin disabled-state() {
  opacity: button-base('disabled-opacity');
  cursor: not-allowed;
  pointer-events: none;
  filter: grayscale(20%);
  
  &::before {
    display: none;
  }
}

/**
 * Loading state mixin for buttons with optimized spinner
 * 
 * @param {String} $variant - Button variant
 */
@mixin loading-state($variant) {
  position: relative;
  
  .btn__text {
    visibility: hidden;
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  
  .btn__icon {
    visibility: hidden;
    opacity: 0;
  }
  
  &::after {
    content: '';
    position: absolute;
    width: button-base('spinner-size');
    height: button-base('spinner-size');
    top: calc(50% - (#{button-base('spinner-size')} / 2));
    left: calc(50% - (#{button-base('spinner-size')} / 2));
    border-radius: 50%;
    $border-color: button-token($variant, 'border-color', 'spinner');
    $border-top-color: button-token($variant, 'border-top-color', 'spinner');
    
    // Fallback for missing token values with appropriate defaults for each variant
    @if $border-color {
      border: 2px solid $border-color;
    } @else {
      @if $variant == 'primary' {
        border: 2px solid rgba(26, 31, 43, 0.2);
      } @else if $variant == 'secondary' {
        border: 2px solid rgba(140, 216, 103, 0.2);
      } @else if $variant == 'outline' or $variant == 'text' {
        border: 2px solid rgba(var(--color-primary-rgb), 0.3);
      } @else {
        border: 2px solid rgba(0, 0, 0, 0.2);
      }
    }
    
    @if $border-top-color {
      border-top-color: $border-top-color;
    } @else {
      @if $variant == 'primary' {
        border-top-color: #1a1f2b;
      } @else if $variant == 'secondary' {
        border-top-color: #8cd867;
      } @else if $variant == 'outline' or $variant == 'text' {
        border-top-color: var(--color-primary);
      } @else {
        border-top-color: var(--color-text);
      }
    }
    
    animation: button-spin 0.8s linear infinite;
    z-index: 2;
  }
  
  .dark-theme &::after {
    $dark-border-color: button-token($variant, 'border-color', 'spinner', true);
    $dark-border-top-color: button-token($variant, 'border-top-color', 'spinner', true);
    
    @if $dark-border-color {
      border-color: $dark-border-color;
    } @else {
      @if $variant == 'primary' {
        border-color: rgba(26, 31, 43, 0.2);
      } @else if $variant == 'secondary' {
        border-color: rgba(140, 216, 103, 0.2);
      } @else if $variant == 'outline' or $variant == 'text' {
        border-color: rgba(var(--color-dark-primary-rgb), 0.3);
      } @else {
        border-color: rgba(255, 255, 255, 0.2);
      }
    }
    
    @if $dark-border-top-color {
      border-top-color: $dark-border-top-color;
    } @else {
      @if $variant == 'primary' {
        border-top-color: #1a1f2b;
      } @else if $variant == 'secondary' {
        border-top-color: #8cd867;
      } @else if $variant == 'outline' or $variant == 'text' {
        border-top-color: var(--color-dark-primary);
      } @else {
        border-top-color: var(--color-dark-text);
      }
    }
  }
}

@keyframes button-spin {
  to {
    transform: rotate(360deg);
  }
} 