/* 
 * Workout Generator Color Token System
 * 
 * This file provides feature-specific color tokens that integrate with the global token system.
 * Uses the standardized map-based architecture for consistent color access patterns.
 */

// Import the global token system
@import '../../../styles/design-system/tokens/index';
// Import the FitCopilot theme color system
@import '../../../styles/theme/index.scss';

// ========================================================================
// WORKOUT GENERATOR COLOR MAPS
// Feature-specific color categories using map architecture
// ========================================================================

// Core color tokens for Workout Generator
$wg-color-categories: (
  'primary': (
    'base': $lime-400,
    'hover': $lime-500,
    'active': $lime-500,
    'disabled': to-rgba($lime-300, 0.5)
  ),
  'secondary': (
    'base': $emerald-400,
    'hover': $emerald-500,
    'active': $emerald-500,
    'disabled': to-rgba($emerald-400, 0.5)
  ),
  'surface': (
    'base': $gray-900,  // Darker background for cards as per mockup
    'hover': $gray-800,
    'active': $gray-800
  )
);

// Semantic usage tokens for Workout Generator
$wg-semantic-categories: (
  'interactive': (
    'primary': map-get(map-get($wg-color-categories, 'primary'), 'base'),
    'secondary': map-get(map-get($wg-color-categories, 'secondary'), 'base')
  ),
  'feedback': (
    'success': $success,
    'error': $error,
    'warning': $warning,
    'info': $info
  ),
  'text': (
    'primary': $white,
    'secondary': $gray-400,
    'disabled': to-rgba($white, 0.5)
  )
);

// State colors with contrast guarantees
$wg-state-categories: (
  'focus': (
    'outline': to-rgba($lime-400, 0.5),
    'background': to-rgba($lime-400, 0.1)
  ),
  'hover': (
    'background': to-rgba($lime-400, 0.05),
    'text': $lime-400
  )
);

// Dark mode is the default in the mockup
$wg-dark-categories: (
  'surface': (
    'base': $gray-900,
    'hover': $gray-800
  ),
  'text': (
    'primary': $white,
    'secondary': $gray-400
  )
);

// Page/container background - very dark blue/navy
$background-dark-navy: #1a202e;

// Title/heading colors
$heading-lime: #a4e052;

// Updated card colors - darker backgrounds with colored text
$wg-card-categories: (
  'goal': (
    'bg': #1e2432,       // Darker card background
    'color': $emerald-400, // Emerald text
    'border': transparent,
    'hover-bg': #212736,
    'label-color': $gray-400
  ),
  'level': (
    'bg': #1e2432,
    'color': $violet-400,  // Purple text
    'border': transparent,
    'hover-bg': #212736,
    'label-color': $gray-400
  ),
  'duration': (
    'bg': #1e2432,
    'color': $blue-400,    // Blue text
    'border': transparent,
    'hover-bg': #212736,
    'label-color': $gray-400
  )
);

// Equipment tag styling - brighter lime with proper opacity
$equipment-tag-styles: (
  'bg': to-rgba($lime-400, 0.1),
  'border': to-rgba($lime-400, 0.3),
  'color': $lime-400,
  'hover-bg': to-rgba($lime-400, 0.2)
);

// Primary action button gradient
$generate-button-gradient: linear-gradient(90deg, $lime-400, $emerald-400);
$generate-button-shadow: 0 4px 12px to-rgba($lime-500, 0.3);
$generate-button-hover-shadow: 0 6px 16px to-rgba($lime-500, 0.4);

// Secondary/edit button styling
$edit-button-bg: transparent;
$edit-button-border: 1px solid $gray-700;
$edit-button-hover-bg: to-rgba($gray-700, 0.1);

// Notice styling - left green border
$notice-bg: to-rgba(#1a2133, 0.6);
$notice-border: $lime-400;
$notice-text: $gray-300;

// ========================================================================
// WORKOUT GENERATOR COLOR ACCESS FUNCTIONS
// Functions to access feature-specific colors consistently
// ========================================================================

/**
 * Get a Workout Generator specific color
 * 
 * @param {String} $category - The color category
 * @param {String} $variant - The variant
 * @return {Color} The color value
 */
@function wg-color($category, $variant: 'base') {
  @if not map-has-key($wg-color-categories, $category) {
    @warn "Unknown WG color category: #{$category}";
    @return null;
  }
  
  $category-map: map-get($wg-color-categories, $category);
  
  @if not map-has-key($category-map, $variant) {
    @warn "Unknown variant #{$variant} for WG category #{$category}";
    @return map-get($category-map, 'base');
  }
  
  @return map-get($category-map, $variant);
}

/**
 * Get a Workout Generator semantic color
 * 
 * @param {String} $category - The semantic category
 * @param {String} $variant - The variant
 * @return {Color} The color value
 */
@function wg-semantic-color($category, $variant: 'primary') {
  @if not map-has-key($wg-semantic-categories, $category) {
    @warn "Unknown WG semantic category: #{$category}";
    @return null;
  }
  
  $category-map: map-get($wg-semantic-categories, $category);
  
  @if not map-has-key($category-map, $variant) {
    @warn "Unknown variant #{$variant} for WG semantic category #{$category}";
    @return map-get($category-map, 'primary');
  }
  
  @return map-get($category-map, $variant);
}

/**
 * Get a card specific color
 * 
 * @param {String} $card-type - The card type (goal, level, duration)
 * @param {String} $property - The property (bg, color, border, hover-bg, label-color)
 * @return {Color} The color value
 */
@function wg-card-color($card-type, $property: 'bg') {
  @if not map-has-key($wg-card-categories, $card-type) {
    @warn "Unknown WG card type: #{$card-type}";
    @return null;
  }
  
  $type-map: map-get($wg-card-categories, $card-type);
  
  @if not map-has-key($type-map, $property) {
    @warn "Unknown property #{$property} for WG card type #{$card-type}";
    @return map-get($type-map, 'bg');
  }
  
  @return map-get($type-map, $property);
}

/**
 * Get a state color for interactive elements
 * 
 * @param {String} $state - The state (focus, hover)
 * @param {String} $property - The property
 * @return {Color} The color value
 */
@function wg-state-color($state, $property) {
  @if not map-has-key($wg-state-categories, $state) {
    @warn "Unknown WG state: #{$state}";
    @return null;
  }
  
  $state-map: map-get($wg-state-categories, $state);
  
  @if not map-has-key($state-map, $property) {
    @warn "Unknown property #{$property} for WG state #{$state}";
    @return null;
  }
  
  @return map-get($state-map, $property);
}

/**
 * Get equipment tag styling property
 * 
 * @param {String} $property - The styling property (bg, border, color, hover-bg)
 * @return {Color} The style value
 */
@function equipment-tag-style($property) {
  @if not map-has-key($equipment-tag-styles, $property) {
    @warn "Unknown equipment tag style property: #{$property}";
    @return null;
  }
  
  @return map-get($equipment-tag-styles, $property);
}

// ========================================================================
// BACKWARD COMPATIBILITY VARIABLES
// Maintains backward compatibility with existing code
// ========================================================================

// Primary core colors
$wg-primary-color: wg-color('primary', 'base');
$wg-primary-hover: wg-color('primary', 'hover');
$wg-secondary-color: wg-color('secondary', 'base');
$wg-secondary-hover: wg-color('secondary', 'hover');

// Feedback colors
$wg-success-color: wg-semantic-color('feedback', 'success');
$wg-error-color: wg-semantic-color('feedback', 'error');

// Card colors
$wg-goal-bg: wg-card-color('goal', 'bg');
$wg-level-bg: wg-card-color('level', 'bg');
$wg-duration-bg: wg-card-color('duration', 'bg');
$wg-goal-color: wg-card-color('goal', 'color');
$wg-level-color: wg-card-color('level', 'color');
$wg-duration-color: wg-card-color('duration', 'color');
$wg-goal-border: wg-card-color('goal', 'border');
$wg-level-border: wg-card-color('level', 'border');
$wg-duration-border: wg-card-color('duration', 'border');
$wg-goal-label-color: wg-card-color('goal', 'label-color');
$wg-level-label-color: wg-card-color('level', 'label-color');
$wg-duration-label-color: wg-card-color('duration', 'label-color');

// Equipment tag styling
$wg-equipment-tag-bg: equipment-tag-style('bg');
$wg-equipment-tag-border: equipment-tag-style('border');
$wg-equipment-tag-color: equipment-tag-style('color');
$wg-equipment-tag-hover-bg: equipment-tag-style('hover-bg');

// Notice styling
$wg-notice-bg: $notice-bg;
$wg-notice-border: $notice-border;
$wg-notice-text: $notice-text;

// Button styling
$wg-generate-button-gradient: $generate-button-gradient;
$wg-generate-button-shadow: $generate-button-shadow;
$wg-generate-button-hover-shadow: $generate-button-hover-shadow;

// Export a flag to indicate this file was imported
$wg-color-tokens-imported: true; 