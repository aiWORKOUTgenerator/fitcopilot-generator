/* 
 * Workout Generator Color Token System
 * 
 * This file provides feature-specific color tokens that integrate with the global token system.
 * New components should use these tokens via the helper functions.
 */

// Import the global token system
@import '../../../styles/design-system/tokens/index';

// Base color tokens - now using the global functions
$wg-colors: (
  'primary': (
    'base': var(--color-wg-primary),
    'hover': var(--color-wg-primary-hover),
    'active': var(--color-wg-primary-hover),
    'disabled': rgba(var(--color-wg-primary-rgb), 0.5)
  ),
  'secondary': (
    'base': var(--color-wg-secondary),
    'hover': var(--color-wg-secondary-hover),
    'active': var(--color-wg-secondary-hover),
    'disabled': rgba(var(--color-wg-secondary-rgb), 0.5)
  ),
  'surface': (
    'base': var(--color-surface),
    'hover': var(--color-surface-accent),
    'active': var(--color-surface-accent)
  )
);

// Semantic usage tokens - streamlined to avoid duplication
$wg-semantic-colors: (
  'interactive': (
    'primary': wg-color('primary', 'base'),
    'secondary': wg-color('secondary', 'base')
  ),
  'feedback': (
    'success': var(--color-wg-success),
    'error': var(--color-wg-error),
    'warning': var(--color-warning),
    'info': var(--color-info)
  ),
  'text': (
    'primary': var(--color-text),
    'secondary': var(--color-text-muted),
    'disabled': rgba(var(--color-text-rgb), 0.5)
  )
);

// State colors with contrast guarantees
$wg-state-colors: (
  'focus': (
    'outline': rgba(var(--color-wg-primary-rgb), 0.5),
    'background': rgba(var(--color-wg-primary-rgb), 0.1)
  ),
  'hover': (
    'background': rgba(var(--color-wg-primary-rgb), 0.05),
    'text': var(--color-wg-primary)
  )
);

// Dark mode color mapping - consolidated
$wg-dark-mode-colors: (
  'surface': (
    'base': var(--color-dark-surface),
    'hover': var(--color-dark-surface-hover)
  ),
  'text': (
    'primary': var(--color-dark-text),
    'secondary': var(--color-dark-text-muted)
  )
);

// Card colors - using the global system
$wg-card-colors: (
  'goal': (
    'bg': var(--color-wg-goal-bg),
    'color': var(--color-wg-goal-color),
    'dark-bg': var(--color-wg-dark-goal-bg),
    'dark-color': var(--color-wg-dark-goal-color)
  ),
  'level': (
    'bg': var(--color-wg-level-bg),
    'color': var(--color-wg-level-color),
    'dark-bg': var(--color-wg-dark-level-bg),
    'dark-color': var(--color-wg-dark-level-color)
  ),
  'duration': (
    'bg': var(--color-wg-duration-bg),
    'color': var(--color-wg-duration-color),
    'dark-bg': var(--color-wg-dark-duration-bg),
    'dark-color': var(--color-wg-dark-duration-color)
  )
);

// Backward compatibility aliases
$wg-primary-color: wg-color('primary', 'base');
$wg-primary-hover: wg-color('primary', 'hover');
$wg-secondary-color: wg-color('secondary', 'base');
$wg-secondary-hover: wg-color('secondary', 'hover');
$wg-success-color: map-get(map-get($wg-semantic-colors, 'feedback'), 'success');
$wg-error-color: map-get(map-get($wg-semantic-colors, 'feedback'), 'error');

// Card colors (maintaining backward compatibility)
$wg-goal-bg: map-get(map-get($wg-card-colors, 'goal'), 'bg');
$wg-level-bg: map-get(map-get($wg-card-colors, 'level'), 'bg');
$wg-duration-bg: map-get(map-get($wg-card-colors, 'duration'), 'bg');
$wg-goal-color: map-get(map-get($wg-card-colors, 'goal'), 'color');
$wg-level-color: map-get(map-get($wg-card-colors, 'level'), 'color');
$wg-duration-color: map-get(map-get($wg-card-colors, 'duration'), 'color');

// Dark mode colors (maintaining backward compatibility)
$wg-dark-goal-bg: map-get(map-get($wg-card-colors, 'goal'), 'dark-bg');
$wg-dark-level-bg: map-get(map-get($wg-card-colors, 'level'), 'dark-bg');
$wg-dark-duration-bg: map-get(map-get($wg-card-colors, 'duration'), 'dark-bg');
$wg-dark-goal-color: map-get(map-get($wg-card-colors, 'goal'), 'dark-color');
$wg-dark-level-color: map-get(map-get($wg-card-colors, 'level'), 'dark-color');
$wg-dark-duration-color: map-get(map-get($wg-card-colors, 'duration'), 'dark-color');

// Helper functions for accessing color tokens
@function wg-color($category, $variant: 'base') {
  @if not map-has-key($wg-colors, $category) {
    @error "Color category '#{$category}' not found in $wg-colors";
  }
  @return map-get(map-get($wg-colors, $category), $variant);
}

@function wg-semantic-color($category, $variant) {
  @if not map-has-key($wg-semantic-colors, $category) {
    @error "Semantic color category '#{$category}' not found in $wg-semantic-colors";
  }
  @return map-get(map-get($wg-semantic-colors, $category), $variant);
}

@function wg-state-color($state, $property) {
  @if not map-has-key($wg-state-colors, $state) {
    @error "State '#{$state}' not found in $wg-state-colors";
  }
  @return map-get(map-get($wg-state-colors, $state), $property);
}

@function wg-dark-color($category, $variant: 'base') {
  @if not map-has-key($wg-dark-mode-colors, $category) {
    @error "Dark mode color category '#{$category}' not found in $wg-dark-mode-colors";
  }
  @return map-get(map-get($wg-dark-mode-colors, $category), $variant);
}

@function wg-card-color($card, $property) {
  @if not map-has-key($wg-card-colors, $card) {
    @error "Card type '#{$card}' not found in $wg-card-colors";
  }
  @return map-get(map-get($wg-card-colors, $card), $property);
} 